import json
from .system import MedicalDiagnosticSystem
from .evaluator import DiagnosisEvaluator


def prompt_input(prompt_text, default=None):
    val = input(prompt_text + (" [Enter para omitir]" if default is not None else "") + ": ")
    if val.strip() == "" and default is not None:
        return default
    return val.strip()


def run_cli():
    """Interfaz m√≠nima para que el m√©dico introduzca s√≠ntomas y confirme el diagn√≥stico."""
    print("üè• Sistema de diagn√≥stico - Entrada de s√≠ntomas")

    # 1) Pedir s√≠ntomas principales (lista)
    sintomas_raw = input("Introduce los s√≠ntomas principales (separados por coma):\n> ")
    sintomas = [s.strip() for s in sintomas_raw.split(",") if s.strip()]

    # 2) Preguntas b√°sicas que el sistema solicita
    edad = prompt_input("Edad del paciente (a√±os)", default="?")
    genero = prompt_input("G√©nero (M/F/O)", default="?")

    tiene_antecedentes = prompt_input("¬øEl paciente tiene antecedentes m√©dicos relevantes? (s/n)", default="n")
    antecedentes = ""
    if tiene_antecedentes.lower().startswith("s"):
        antecedentes = input("Describe los antecedentes (breve):\n> ")

    extras_raw = prompt_input("¬øDeseas a√±adir s√≠ntomas extras generales? (separa por coma)", default="")
    sintomas_extras = [s.strip() for s in extras_raw.split(",") if s.strip()]

    # Construir caso
    caso = {
        "id": "CLI-CASE-1",
        "paciente": {
            "edad": edad,
            "genero": genero,
            "sintomas": sintomas + sintomas_extras,
            "duracion": "desconocida",
            "progresion": "desconocida"
        },
        "antecedentes": antecedentes
    }

    # Inicializar sistema
    sistema = MedicalDiagnosticSystem()

    # Diagnosticar
    resultado = sistema.diagnosticar(caso)

    # Evaluar el diagn√≥stico respecto a la DB
    evaluator = DiagnosisEvaluator()
    eval_res = evaluator.evaluate(resultado, caso, sistema)

    print("\nÔøΩ M√©trica y justificaci√≥n del evaluador:")
    print(eval_res.get('justification', 'Sin justificaci√≥n.'))

    # Decide si el top resultado est√° soportado por la DB
    diag = resultado.get("diagnostico_final", {})
    top_name = str(diag.get('enfermedad', '')).strip()

    # Si no hay DB para evaluar, mostrar resultado y preguntar al m√©dico como antes
    if eval_res.get('metric') is None:
        print("\n‚ö†Ô∏è No es posible evaluar el resultado contra la base (DB ausente). Se muestra el diagn√≥stico igual).")
        print(json.dumps(diag, indent=2, ensure_ascii=False))
        confirm = prompt_input("¬øEs correcto el diagn√≥stico? (s/n)", default="s")
        if confirm.lower().startswith("s"):
            print("‚úÖ Diagn√≥stico confirmado. Gracias.")
            # Guardar el caso confirmado en la BD para mejorar la m√©trica futura
            diag_name = top_name or prompt_input("Confirma el nombre del diagn√≥stico para guardar:", default=top_name)
            sistema.save_case(caso, diag_name)
            # Generar 20 casos sint√©ticos para reforzar la BD
            nuevos = sistema.learn_from_feedback(caso, diag_name, n=20)
            print(f"Se generaron {len(nuevos)} casos sint√©ticos y se a√±adieron a la BD.")
        else:
            real = prompt_input("Introduce el diagn√≥stico real (nombre):")
            print("Generando y guardando casos sint√©ticos para aprender del error...")
            casos_generados = sistema.learn_from_feedback(caso, real, n=5)
            # Guardar tambi√©n el caso original etiquetado con el diagn√≥stico real
            sistema.save_case(caso, real)
            print(f"Se generaron {len(casos_generados)} casos y se guardaron (si vectorstore disponible).")
    else:
        hallucinated = eval_res.get('hallucinated_candidates', [])
        # build list of hallucinated names
        halluc_names = [str(c.get('enfermedad','')).strip().lower() for c in hallucinated]

        if top_name.lower() in halluc_names:
            # Top prediction is not supported by DB -> hide it and ask the doctor
            print('\n‚ö†Ô∏è El diagn√≥stico propuesto NO est√° soportado por la base de conocimiento (posible alucinaci√≥n).')
            print('El sistema declara que no sabe a qu√© enfermedad corresponde basado en la DB.')
            real = prompt_input("Por favor, introduce el diagn√≥stico correcto para que el sistema aprenda:")
            print("Generando y guardando casos sint√©ticos para aprender del diagn√≥stico correcto...")
            casos_generados = sistema.learn_from_feedback(caso, real, n=5)
            print(f"Se generaron {len(casos_generados)} casos y se guardaron (si vectorstore disponible).")
        else:
            # Top is supported -> mostrar y confirmar (pero sustituimos la probabilidad por la m√©trica del evaluador)
            print("\nüîç Resultado propuesto por el sistema (soportado por DB):")
            # Reemplazar la probabilidad del LLM por la m√©trica del evaluador (porcentaje -> 0-1)
            metric_pct = eval_res.get('metric')
            if metric_pct is not None:
                try:
                    diag['probabilidad'] = round(metric_pct / 100.0, 3)
                except Exception:
                    pass
            print(json.dumps(diag, indent=2, ensure_ascii=False))
            confirm = prompt_input("¬øEs correcto el diagn√≥stico? (s/n)", default="s")
            if confirm.lower().startswith("s"):
                print("‚úÖ Diagn√≥stico confirmado. Gracias.")
                sistema.save_case(caso, top_name)
                nuevos = sistema.learn_from_feedback(caso, top_name, n=20)
                print(f"Se generaron {len(nuevos)} casos sint√©ticos y se a√±adieron a la BD.")
            else:
                real = prompt_input("Introduce el diagn√≥stico real (nombre):")
                print("Generando y guardando casos sint√©ticos para aprender del error...")
                casos_generados = sistema.learn_from_feedback(caso, real, n=5)
                sistema.save_case(caso, real)
                print(f"Se generaron {len(casos_generados)} casos y se guardaron (si vectorstore disponible).")

    print("Proceso finalizado.")


if __name__ == '__main__':
    run_cli()
